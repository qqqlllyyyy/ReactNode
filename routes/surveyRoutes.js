const _ = require("lodash");
const Path = require("path-parser");
const { URL } = require("url"); // 'url' is a default module in nodejs system.
const mongoose = require("mongoose");
const reuqireLogin = require("../middlewares/requireLogin");
const requireCredits = require("../middlewares/requireCredits");
const Mailer = require("../services/Mailer");
const surveyTemplate = require("../services/emailTemplates/surveyTemplate");

// Access database
const Survey = mongoose.model("surveys");

module.exports = app => {
  // Custom page after voting
  app.get("/api/surveys/thanks", (req, res) => {
    res.send("Thanks for voting.");
  });

  //------------------------------------------------------------------------------
  // SendGrid Notification
  //------------------------------------------------------------------------------
  app.post("/api/surveys/webhooks", (req, res) => {
    // Pull out just surveyId and choice
    const p = new Path("/api/surveys/:surveyId/:choice");
    // The extract process with map function
    // 'req.body' is the list of events
    const events = _.map(req.body, ({ email, url }) => {
      // Remove domain part
      // const pathname = new URL(url).pathname;
      // 'p.test(pathname)' will return an object with two properties `surveyId` and `choice`.
      // If `pathname` doesn't have surveyId or choice, `match` will be null;
      const match = p.test(new URL(url).pathname);
      if (match) {
        return {
          email,
          surveyId: match.surveyId,
          choice: match.choice
        };
      }
    });

    // Remove 'undefined' element from an array
    const compactEvents = _.compact(events);
    // Remove duplications with same 'email' and 'surveyId'
    const uniqueEvents = _.uniqBy(compactEvents, "email", "surveyId");
    console.log(uniqueEvents);
  });

  //------------------------------------------------------------------------------
  // Create a New Survey
  //------------------------------------------------------------------------------
  // We can pass as many middlewares as we want
  // Make sure the user is logged in
  // Check the user have enough credits
  app.post("/api/surveys", reuqireLogin, requireCredits, async (req, res) => {
    // All the parameters for the POST request are in 'req.body'
    const { title, subject, body, recipients } = req.body;

    // Create an instance of the 'Survey' in memory (not saved yet)
    const survey = new Survey({
      title, // Equivalent to: title: title
      subject,
      body,
      recipients: recipients.split(",").map(email => ({ email: email.trim() })),
      _user: req.user.id, // ID generated by mongoose
      dateSent: Date.now()
    });

    // Send an email
    // Pass in survey data and the html template
    const mailer = new Mailer(survey, surveyTemplate(survey));

    try {
      await mailer.send();
      // Save the survey and the user
      await survey.save();
      req.user.credits -= 1;
      const user = await req.user.save();
      // Send back the updated user model, so we have the updated credits
      res.send(user);
    } catch (err) {
      // '422' means unprocessible entity
      res.status(422).send(err);
    }
  });
};
